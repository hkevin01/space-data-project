version: '3.8'

services:
  # Main application service
  space-comm-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: space-comm-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - SPACE_COMM_ENV=production
      - SPACE_COMM_LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://spaceuser:spacepass@postgres:5432/spacecomm
      - PROMETHEUS_URL=http://prometheus:9090
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - redis
      - postgres
      - prometheus
    networks:
      - space-comm-network
    healthcheck:
      test: ["CMD", "python", "-c", "import src.utils.health_check; src.utils.health_check.check()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: space-comm-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - space-comm-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: space-comm-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: spacecomm
      POSTGRES_USER: spaceuser
      POSTGRES_PASSWORD: spacepass
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - space-comm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spaceuser -d spacecomm"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: space-comm-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - space-comm-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: space-comm-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - space-comm-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message queue (Apache Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: space-comm-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - space-comm-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: space-comm-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - space-comm-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NATS for high-performance messaging
  nats:
    image: nats:alpine
    container_name: space-comm-nats
    restart: unless-stopped
    ports:
      - "4222:4222"
      - "8222:8222"  # Monitoring port
    command: ["-js", "-m", "8222"]
    volumes:
      - nats_data:/data
    networks:
      - space-comm-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Development service (for development environment)
  space-comm-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: space-comm-dev
    restart: unless-stopped
    ports:
      - "8001:8000"
      - "5678:5678"  # Debug port
    environment:
      - SPACE_COMM_ENV=development
      - SPACE_COMM_LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://spaceuser:spacepass@postgres:5432/spacecomm
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - space-comm-network
    profiles:
      - dev
    command: python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m src.main

  # Testing service
  space-comm-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: space-comm-test
    environment:
      - SPACE_COMM_ENV=testing
    volumes:
      - .:/app
      - ./test-reports:/app/test-reports
    networks:
      - space-comm-network
    profiles:
      - test
    command: python -m pytest tests/ -v --cov=src --cov-report=html:/app/test-reports/coverage

  # Security scanning service
  space-comm-security:
    build:
      context: .
      dockerfile: Dockerfile
      target: security
    container_name: space-comm-security
    volumes:
      - ./security-reports:/app/security-reports
    networks:
      - space-comm-network
    profiles:
      - security

  # Monitoring service with additional tools
  space-comm-monitoring:
    build:
      context: .
      dockerfile: Dockerfile
      target: monitoring
    container_name: space-comm-monitoring
    ports:
      - "9091:9091"
    environment:
      - SPACE_COMM_ENV=monitoring
    volumes:
      - ./monitoring:/app/monitoring
      - ./logs:/app/logs:ro
    depends_on:
      - prometheus
      - grafana
    networks:
      - space-comm-network
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  nats_data:
    driver: local

# Custom network for service communication
networks:
  space-comm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
